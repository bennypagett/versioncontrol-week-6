## Week 6 Activity - Version Control
###script for rugby analysis

library(readr) 
library(tidyverse)
library(ggplot2)
df <- read_csv("data/2017_super-rugby_try-source-data.csv") ## load dataframe - Rugby analysis
View(df)



head(df)
tail(df)
str(df)

```{r na}
sum(is.na(df)) # count the missing values
head(which(is.na(df), arr.ind = TRUE)) # find where the missing values are (showing only first 6 rows)
```

library(dplyr)

sum(is."0"(df))
nrow(0)
ncol(0)
head(which(is.0(df)), arr.ind = TRUE))


df[df == 0] <- NA ### replace 0's with NA

## exploratory graphs to visualise univariate distribution - frequency/histograms

df <- df %>%
  ggplot(data = df) +
  geom_histogram(mapping = aes(x = attacking_team, fill = attacking_team, colour = "black"), stat = "count",
                 binwidth = .001)


df <- df %>%
  ggplot(data = df) +
  geom_bar(mapping = aes(x = attacking_team, fill = attacking_team), stat = "count",
           binwidth = .02)

df %>%
  ggplot() + ##because I have df%>% i don't need to attribute it to df, and therefore don't need in the ggplot
  geom_histogram(mapping = aes(x = game_time, fill = game_time)) ##do not need stat = "count" already in default setting.
                 binwidth = 10)

ggplot(data = df) +
  geom_freqpoly(mapping = aes(x = game_time, fill = "blue"), stat = "count",
                binwidth = 10)

ggplot(data = df) + ##correct code, having error with Knitr in Rmd??
  geom_histogram(mapping = aes(x = game_time), fill = "dodgerblue", colour = "black", stat = "count",
                 binwidth = 10)

ggplot(data = df) +
  geom_histogram(mapping = aes(x = try_source), fill = "dodgerblue", colour = "black", stat = "count",
                 binwidth = 10)

ggplot(data = df) +
  geom_histogram(mapping = aes(x = final_source), fill = "dodgerblue", colour = "black", stat = "count",
                 binwidth = 10)

ggplot(data = df) +
  geom_histogram(mapping = aes(x = possession_zone), fill = "dodgerblue", colour = "black", stat = "count",
                 binwidth = 10)

ggplot(data = df) +
  geom_histogram(mapping = aes(x = time_from_source), fill = "dodgerblue", colour = "black",
                 binwidth = 10)

ggplot(data = df) +
  geom_freqpoly(mapping = aes(x = game_time), stat = "count")



df %>%
  count(try_no) %>%
  mutate(prop = prop.table(n)) %>%
  ggplot() +
  geom_point(mapping = aes(x = reorder(try_no, prop), y = prop, fill = prop), stat = "identity")

  ggplot(data = df) +
  geom_point(mapping = aes(x = game_time, y = attacking_team, fill = attacking_team))
  ##want to group_by teams
  
brumbies_try_time <- df %>%
  filter(attacking_team == "Brumbies") %>%
  count(brumbies_try_time == try_no) %>%
  mutate(prop = prop.table(n)) %>%
  ggplot() +
    geom_point(mapping = aes(x = game_time, y = prop, fill = prop), stat = "identity")
  
brumbies_try_time %>%
  count(try_no) %>%
  mutate(prop = prop.table(n)) %>%
  ggplot() +
  geom_point(mapping = aes(x = game_time, y = prop, fill = prop), stat = "identity") 

brumbies_try_time %>%
  view(prop)


df %>%
  ggplot(mapping = aes(x = try_no, y = attacking_team)) +
  geom_point(alpha = 0.3, size = 2)

# between teams variation- compares the differences in mean distance to goals for each attacking team

bw_teams <- df %>%
  filter(try_source == "Ruck Turnover") %>%
  group_by(attacking_team) %>%
  summarise(mean = mean(game_time))
bw_teams

wn_teams <- df %>%
  filter(try_source == "Ruck Turnover") %>%
  group_by(attacking_team) %>%
  summarise(sd = sd(game_time))
wn_teams

#how much do the teams differ by

between_sd <- sd(bw_teams$mean)
between_sd

#within team variation - how much did each team's performance differ

wn_teams <- df %>%
  filter(outcome == "Goal")%>%
  group_by(attacking_team) %>%
  summarise(sd = sd(distance_to_goal))
wn_teams

  


print(geom_histogram)

exists("attacking_team")

str(df)
class(attacking_team)
filter(df == attacking_team)

df

print(class(attacking_team))

col_type()

